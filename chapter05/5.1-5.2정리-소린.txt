# 5. 가독성 높은 코드를 작성하라

- 코드가 그 자체로 설명이 되도록 하기 위한 방법
- 다른 사람에게 코드의 세부적 내용을 명확하게 함
- 언어의 기능을 사용할 떄 그에 합당한 이유를 가져감

가독성의 핵심은 개발자가 코드의 기능을 빠르고 정확하게 이해할 수 있도록 하는 것이다. 실제로 이렇게 하려면 다른 사람의 관점에서 보았을때 코드가 혼란스럽거나 잘못 해석될 수 있는지를 상상하고 공감해야 할 때가 많다.

## 5.1 서술형 명칭 사용

- 이름을 붙이는 것은 그것이 스스로 설명되는 방식으로 언급함으로써 읽기 쉬운 코드 작성을 위한 기회이기도 하다.

### 5.1.1 서술적이지 않은 이름은 코드를 읽기 어렵게 만든다.

### 5.1.2 주석문으로 서술적인 이름을 대체할 수 없다.

- 코드가 훨씬 더 복잡해 보인다. 작성자와 다른 개발자는 코드뿐만 아니라 주석문과 문서도 유지보수 해야한다.
- 매개변수 및 반환 유형을 주석문으로 설명하는 것은 다른 개발자가 코드 사용 방법을 이해하는데 도움이 될 수 있다. 하지만 서술적인 이름을 붙이는 대신 주석문을 사용하면 안된다.

### 5.1.3 해결책: 서술적인 이름 짓기

## 5.2 주석문의 적절한 사용

- 클래스와 같이 큰 단위의 코드가 무엇을 하는지 요약하는 높은 수준에서의 주석문은 유용하다.
- 코드가 왜 그 일을 하는지에 대한 이유나 배경을 설명하는 주석문은 유용할때가 많은데, 코드만으로는 이를 명확히 할 수 없기 때문이다.

### 5.2.1 중복된 주석문은 유해할 수 있다.

- 코드 자체로 설명이 되기 때문에 주석문은 쓸모가 없다.

### 5.2.2 주석문으로 가독성 높은 코드를 대체할 수 없다.

- 주석문이 유용한 것처럼 보이지만, 진짜 문제는 코드가 읽기 쉽도록 작성되지 않았다는 점이다.
- 잘 명명된 헬퍼 함수를 사용하면 가독성 높은 코드를 쉽게 작성할 수 있다.

### 5.2.3 주석문은 코드의 이유를 설명하는데 유용하다

- 코드가 그 일을 왜 수행하는지는 코드 자체로는 설명하기 어렵다.
- 배경 상황이나 지식이 코드를 이해하거나 안전하게 수정하기 위해 중요한 경우 주석문은 매우 유용하다.
  - 제품 또는 비즈니스 의사 결정
  - 이상하고 명확하지 않은 버그에 대한 해결책
  - 의존하는 코드의 예상을 벗어나는 동작에 대처

### 5.2.4 주석문은 유용한 상위 수준의 요약 정보를 제공할 수 있다.

클래스가 하는 일을 요약한 상위 수준의 주석문은 마치 이(책의 목차 혹은 요약글)와 같다. 다른 개발자는 그 클래스가 그들에게 유용한지 혹은 그것이 어떤 영향을 미칠지 쉽게 가늠해볼 수 있다.

- 클래스가 수행하는 작업 및 다른 개발자가 알고 있어야 할 중요한 세부 사항을 개괄적으로 설명하는 문서
- 함수에 대한 입력 매개변수 또는 기능을 설명하는 문서
- 함수의 반환값이 무엇을 나타내는지 설명하는 문서

문서가 중요하지만 개발자들이 읽지 않는 경우가 많다는 사실에 현실적으로 대처해야 한다. 따라서 예측대로 실행되고 오용을 방지하는 코드를 작성하려고 할 때, 문서나 주석문에 너무 많이 의존하지 않는 것이 바람직하다.

단점으로는 이런 주석문과 문서도 유지 및 보수가 필요하고 내용이 제대로 업데이트 되지 않으면 코드와 맞지 않게 되고 코드가 지저분해질 수 있다.

