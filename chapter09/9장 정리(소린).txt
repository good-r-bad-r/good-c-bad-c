# 9. 코드를 재사용하고 일반화할 수 있도록 하라

- 안전하게 재사용할 수 있는 코드 작성 방법
- 다양한 문제를 해결하기 위해 일반화된 코드를 작성하는 방법

---

- 하위 문제에 대한 해결책이 이미 존재한다고 해서 항상 재사용할 수 있는 것은 아니다.
- 간결한 추상화 계층을 만들고 코드를 모듈화하면 하위 문제의 해결책이 서로 느슨하게 결합하는 코드로 나누어지는 경향이 있다. 이렇게 되면 보통 코드를 재사용하고 일반화하기가 훨씬 더 쉽고 안전해진다.

## 9.1 가정을 주의하라

- 코드 작성 시 가정을 하면 코드가 더 단순해지거나, 더 효율적으로 되거나, 둘 다일 수도 있다. 그러나 이러한 가정으로 인해 코드가 더 취약해지고 활용도가 낮아져 재사용하기에 안전하지 않을 수 있다. 코드의 어느 부분에서 어떤 가정이 이루어졌는지 정확히 추적하는 것은 극도로 어렵기 때문에 이런 가정은 다른 개발자들이 주의하지 않으면 빠질 수 있는 기분 나쁜 함정이 될 수 있다.
- 코드 작성 시 가정을 하기 전에 그 가정으로 초래될 비용과 이점을 생각해봐야 한다. 코드 단순화 또는 효율성의 명백한 이득이 미미하다면 늘어난 취약성으로 인한 비용이 장점을 능가하기 때문에 가정을 하지 않는 것이 최선일 수 있다

### 9.1.2 해결책: 불필요한 가정을 피하라

- 섣부른 최적화
  - 코드 최적화는 일반적으로 비용이 든다.
  - 코드의 어떤 부분이 여러 번 실행되고 그 부분을 최적화하는 것이 성능 향상에 큰 효과를 볼 수 있다는 점이 명백해질때에에야 최적화 작업을 해도 무방하다.
- 코드에 가정이 들어가면 취약성의 측면에서도 관련 비용을 수반한다는 것을 기엇하는 것이 중요하다.

### 9.1.3 해결책: 가정이 필요하면 강제적으로 하라

- 가정이 깨지지 않게 만들라: 가정이 깨지면 컴파일되지 않은 방식으로 코드를 작성할 수 있다면 가정이 항상 유지될 수 있다.
- 오류 전달 기술을 사용하라: 가정을 깨는 것이 불가능하게 만들 수 없는 경우에는 오류를 감지하고 오류 신호 전달 기술을 사용하여 신속하게 실패하도록 코드를 작성할 수 있다.
- 일반적으로 실패와 오류는 명확하게 드러나는 것이 최선이다.

## 9.2 전역 상태를 주의하라

- 전역상태 또는 전역변수는 실행되는 프로그램 내의 모든 콘텍스트 사이에 공유된다.
- 전역변수는 프로그램 내의 모든 콘텍스트에 영향을 미치기 때문에 전역변수를 사용할 때는 누구도 해당 코드를 다른 목적으로 재사용하지 않을 것이라는 암묵적인 가정을 전제한다.

### 9.2.1 전역 상태를 갖는 코드는 재사용하기에 안전하지 않을 수 있다.

- 가정이 깨지는 상황을 많이 생각해낼 수 있을 것이다. 그들 중 어떤 것이 실제로 일어날지는 아무도 예측할 수 없다. 하지만 말하려는 요점은 원래의 가정이 취약하고 어느 시점에 이르면 어떤 식으로든 그 가정을 깨트리는 그럴듯한 시나리오들이 충분히 있다는 것이다.

### 9.2.1 해결책: 공유 상태에 의존성을 주입하라

- 의존성 주입은 전역 상태를 사용하는 것보다 더 통제된 방법으로 서로 다른 클래스 간에 상태를 공유하는 좋은 방법이기도 하다.
- 전역상태가 사용된다는 사실을 다른 개발자는 모를 수 있기 때문에 코드를 재사용하려고 하면 이상한 동작과 버그가 발생할 수 있다. 프로그램의 서로 다른 부분 간에 상태를 공유해야할 경우 의존성 주입을 사용해 보다 통제된 방식으로 수행하는 것이 더 안전하다.

## 9.3 기본 반환값을 적절하게 사용하라

- 합리적인 기본값은 사용자 친화적인 소프트웨어를 만들기 위한 좋은 방법이다
- 낮은 층위에서는 모든 용도에 적합한 기본값을 선택하기가 훨씬 더 어렵다.

### 9.3.1 낮은 층위의 코드의 기본 반환값은 재사용성을 해칠 수 있다.

- 사용자가 특별히 Arial을 선택한 것인지 아니면 선호하는 폰트를 설정하지 않아 기본값이 반환된 것인지 구분하는 것이 불가능하다.
- 다른 개발자가 코드를 재사용하거나 요구 사항이 변경되면 이러한 가정은 쉽게 문제가 될 수 있다.
- 기본값을 정의하는 코드의 계층이 낮을수록 그 가정이 적용되는 상위 계층은 더 많아진다.

### 9.3.2 해결책: 상위 수준의 코드에서 기본값을 제공하라

- 호출하는 쪽에서 원하는 방식으로 이 하위 문제를 해결할 수 있다는 것을 의미하며, 코드의 재사용성을 높여준다.
- 기본 반환값 매개변수
  - 어떤 기본값을 사용할지에 대한 결정을 호출하는 쪽에서 하도록 하면 코드의 재사용성이 향상된다.
  - 코드의 일부에서 사용하는 한 가지 방법은 기본 반환값 매개변수를 사용하는 것이다.

## 9.4 함수의 매개변수를 주목하라

- 함수가 한두가지 정보만 필요로 할 때는 객체나 클래스의 인스턴스를 매개변수로 사용하는 것은 코드의 재사용성을 해칠 수 있다.

### 9.4.1 필요 이상으로 매개변수를 받는 함수는 재사용하기 어려울 수 있다.

- 인스턴스를 매개변수로 사용하면 누군가가 그 기능을 조금 다른 상황에 재사용하고자 할 때 해로운 영향를 끼친다.
- 함수는 필요한 것만 매개변수로 받는 것이 더 바람직하다.

### 9.4.2 해결책: 함수는 필요한 것만 매개변수로 받도록 하라

- 일반적으로 함수가 필요한 것만 받도록 하면 코드는 재사용성이 향상되고 이해하기도 쉬워진다.
- 10가지 항목을 캡슐화하는 클래스가 있고 그 중 8개를 필요로 하는 함수가 있다면, 캡슐화 객체 전체를 함수에 전달하는 것이 합리적이다.

## 9.5 제네릭의 사용을 고려하라

- 제네릭을 통해 참조하는 모든 유형을 구체적으로 명시할 필요 없이 클래스를 작성할 수 있다.

### 9.5.1 특정 유형에 의존하면 일반화를 제한한다.

- 코드가 일반화되어 거의 동일한 하위 문제를 해결할 수 있다면 훨씬 더 바람직할 것이다.

### 9.5.2 해결책: 제네릭을 사용하라

- 특정 클래스에 대한 의존성을 갖는 대신 이 클래스를 나중에 사용할 떄 어떤 유형을 사용할지 지시 할 수 있는 자리 표시자를 지정할 수 있다.
- 높은 수준의 문제를 하위 문제로 세분화하다 보면 다양한 사례에 적용할 수 있는 매우 근본적인 문제를 접한다. 하위 문제에 대한 해결책이 모든 데이터 유형에 쉽게 적요오딜 수 있을 때 특정 유형에 의존하는 대신 제네릭을 사용하더라도 추가적인 노력이 거의 들어가지 않는다. 이렇게하면 코드는 보다 더 일반화되고 재사용이 가능하다는 측면에서 쉽게 효과를 볼 수 있다.
