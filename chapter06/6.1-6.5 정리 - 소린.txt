# 6. 예측 가능한 코드를 작성하라

- 목표

1. 코드가 어떻게 예측을 벗어나 작동할 수 있는지
2. 소프트웨어에서 예측을 벗어나는 코드가 어떻게 버그로 이어질 수 있는지
3. 코드가 예측을 벗어나지 않도록 보장하는 방법

- 궁극적으로 개발자는 코드를 사용하는 방법에 대한 정신 모델을 구축한다. 코드가 실제로 하는 일이 이 정신 모델과 일치하지 않는다면, 예측과 벗어나는 기분 나쁜 일이 일어날 가능성이 크다. 최상의 경우라도 코드 이해와 작성에 들어가는 시간이 다소 낭비될 수 있고 최악의 경우에는 치명적인 버그가 발생할 수 있다.

## 6.1 매직값을 반환하지 말아야 한다.

- ex. 오류가 발생했음을 나타내기 위해 -1을 반환하는 것

### 6.1.1 매직값은 버그를 유발할 수 있다.

- 과거에는 더 명시적인 오류 전달 기법이나 널 또는 옵셔널 타입을 반환하는 것이 가능하지 않거나, 실용적이지 않기 때문에 -1과 같은 매직값을 반환하는 것이 어느정도 합리적이었다.

### 6.1.2 해결책: 널, 옵셔널 또는 오류를 반환하라

- 값이 없을 수 있는 경우 이것이 코드 계약의 명백한 부분에서 확인할 수 있도록 하는 것이 훨씬 좋다.
- 널 안전성을 지원하는 경우에는 널이 가능한 유형을 반환하고, 널 안전성을 지원하지 않는 경우에는 옵셔널 값을 반환하는 것이다. 이를 통해 호출하는 쪽에서 값이 없을 수 있음을 인지하고 적절한 방법으로 이를 처리할 수 있게 해야 한다.

### 6.1.3 때때로 매직값이 우연히 발생할 수 있다.

## 6.2 널 객체 패턴을 적절히 사용하라

- 널값을 반환하는 대신 유효한 값이 반환되어 그 이후에 실행되는 로직에서 널값으로 인해 시스템에 피해가 가지 않도록 하기 위함이다.
- 가장 간단한 형태는 빈 문자열이나 빈 리스트를 반환하는 것이지만, 더 정교한 형태로는 모든 멤버 함수가 아무것도 하지 않거나 기본값을 반환하는 클래스를 구현하는 것이다.

### 6.2.1 빈 컬렉션을 반환하면 코드가 개선될 수 있다.

- 널 값을 반환했을 경우
  - 장점: 속성이 지정되지 않은 경우는 널 반환, 속성이 지정되었으나 비어 있는 경우에는 빈 집합 반환으로 이 둘의 차이를 구분할 수 있음
  - 단점: 호출하는 쪽에서는 반환된 값이 널인지 여부를 확인한 후 사용해야 한다.(코드가 지저분해진다.), 처리를 빠뜨릴 경우 NPE가 발생한다.

### 6.2.2 빈 문자열을 반환하는 것도 때로는 문제가 될 수 있다.

- 문자들의 모음으로서 문자열
  - 문자열이 단지 문자를 모아놓은 것에 불과하고, 코드에서 그 외의 별다른 의미가 없다면 문자열이 없을 때 널 객체 패턴을 사용하는 것, 즉 널 대신 빈 문자열을 반환하는 것은 일반적으로 문제가 없다.
- ID로서의 문자열
  - 문자열이 없는지를 파악하는 것이 중요할 수 있는데, 이에 따라 실행할 논리에 영향을 미칠 수 있기 때문이다. 그러므로 문자열이 없을 수 있음을 함수를 호출하는 쪽에서 명시적으로 인식하도록 하는 것이 중요하다.

### 6.2.3 더 복잡한 널 객체는 예측을 벗어날 수 있다.

- 함수를 호출할 때 널 객체 패턴을 사용하는 것은 본질적으로 빈 상자를 파는 것과 같다. 호출하는 쪽에서 빈 상자를 받고 놀라거나 황당해할 가능성이 있다면, 널 객체 패턴을 피하는 것이 가장 좋을 것이다.
- 널 객체 패턴의 더 복잡한 형태 중 하나는 클래스를 만들고 무해한 값을 클래스 안에 두는 것이다.
  - 언제나 유효한 객체를 반환받을 것이라는 잘못된 인상을 줄 수 있다.
- 따라서, 어떤 경우에는 널을 반환하는 것이 더 나을 수 있다.
  - 코드 계약에 함수가 유효한 객체를 반환하지 않을 수도 있다는 점이 명백해지고, 실제로 널이 반환된다면 이것은 예상된 결과 중 하나다.

### 6.2.4 널 객체 구현은 예상을 벗어나는 동작을 유발할 수 있다.

- 일부 개발자들은 널 객체 패턴에서 한 단계 더 나아가 널 객체 전용의 인터페이스나 클래스를 정의한다.
- 인터페이스나 클래스가 단순히 무언가를 반환하는 기능보다는 무언가를 수행하는 기능을 가지고 있을 때 이런 것이 필요한 것처럼 보일 수 있다.
- 널 객체 패턴은 여러 형태로 나타날 수 있다. 이것을 사용하거나 접할 때 그것이 정말 적절한지 아니면 예상을 벗어나는 동작을 할 가능성이 있는지에 대해 의식적으로 생각해봐야 한다. 널 안전성과 옵셔널을 사용하는 것이 인기를 얻음에 따라 값이 없음을 훨씬 쉽고 안전하게 나타낼 수 있게 되었다. 이와 함께 널 객체 패턴의 사용을 지지하는 기존의 주장들 중 많은 것들이 요즘에는 설득력이 떨어졌다.

## 6.3 예상치 못한 부수 효과를 피하라

- 부수효과는 어떤 함수의 호출이 함수 외부에 초래한 상태 변화를 의미한다.
  - 출력
  - 데이터 저장
  - 외부 시스템 호출로 네트워크 트래픽 발생
  - 캐시 업데이트 혹은 무효화 등
- 부수 효과가 예상되고 코드를 호출한쪽에서 그것을 원한다면 괜찮지만, 부수 효과가 예상되지 않을 경우 놀라움을 유발하고 버그로 이어질 수 있다.
- 예상치 못한 부수 효과를 피하는 법: 클래스를 불변으로 만들기
- 부수효과를  피할 수 없는 경우: 호출하는 쪽에서 이에 대해 확실하게 인지하도록 하기

### 6.3.1 분명하고 의도적인 부수 효과는 괜찮다.

### 6.3.2 예기치 않은 부수 효과는 문제가 될 수 있다.

- 부수 효과는 비용이 많이 들 수 있다.
- 호출한 쪽의 가정을 깨트리기
- 다중 스레드 코드의 버그
  - 서로 다른 스레드가 종종 동일한 데이터에 액세스할 수 있기 때문에 한 스레드로 인한 부수효과는 때때로 다른 스레드에 문제를 일으킬 수 있다.

### 6.3.3 해결책: 부수 효과를 피하거나 그 사실을 분명하게 하라

- 부수 효과가 정말로 필요한 것인지 확인한다.
- 필요한 것이라면 이름을 통해 사실을 명백하게 나타내라

## 6.4 입력 매개변수를 수정하는 것에 주의하라

### 6.4.1 입력 매개변수를 수정하면 버그를 초래할 수 있다.

- 대부분의 개발자는 입력 매개변수의 수정이 일어나지 않을 것이라고 예상하고 이 부수 효과가 일어난다면 깜짝 놀랄 것이다.

### 6.4.2 해결책: 변경하기 전에 복사하라

- 변경 전에 새 자료구조에 복사하는 것이 최상의 방법이다.
- 메모리나 CPU와 관련해 성능에 영향을 미칠 수 있지만, 입력 매개변수의 변경으로 인해 발생할 수 있는 예기치 못한 동작이나 버그와 비교하면 성능이 크게 문제되지 않는 경우가 많다.
- 만약 성능상의 이유로 입력 매개변수를 변경해야 하는 경우 함수 이름과 문서에 이러한 일이 발생한다는 점을 분명이 하는 것이 좋다.

## 6.5 오해를 일으키는 함수는 작성하지 말라

### 6.5.1 중요한 입력이 누락되었을 때 아무것도 하지 않으면 놀랄 수 있다.

### 6.5.2 해결책: 중요한 입력은 필수 항목으로 만들라

- 중요한 매개변수가 널이 가능한 값을 받아들일 수 있게 하면 호출하는 쪽에서 호출하기 전에 널값 여부를 확인할 필요가 있다.
