# 3. 다른 개발자와 코드 계약

- 다른 개발자들이 코드와 어떻게 상호작용하는지
- 코드 계약과 코드 계약의 세부 조항
- 세부 조항을 최소화하는 것이 어떻게 오용과 예측을 벗어나는 코드를 예방하는 데 도움이 되는지
- 세부 조항을 피할 수 없다면 체크와 어서션을 어떻게 사용할 수 있는가?

## 3.1 자신의 코드와 다른 개발자의 코드

- 다른 개발자들은 여러분이 전혀 생각지 못한 완전히 다른 문제에서 여러분이 작성한 하위 문제 해결 코드를 재사용할 수 있다.
- 우선순위가 변경되고, 새로운 기능이 추가되어야 하며 시스템은 때로 새로운 기술 환경으로 옮겨져야 한다.이것은 코드와 소프트웨어도 항상 변한다는 것을 의미한다.
- 다른 개발자가 변경하거나 코드와 상호작용할 때 **발생할 수 있는 문제는** 없는지, 또 발생한다면 그 문제를 어떻게 완화할 수 있을지를 이해하고 **선제적으로 조치**해야 한다.
- 자신이 작성한 코드가 독립적으로 존재하는 경우는 거의 없다. 다른 개발자들이 작성한 코드에 의존할 것이고, 다른 엔지니어들 또한 여러분의 코드에 의존하는 코드를 작성할 것이다. 
- 코드를 작성할 때 고려해야 것 
  - 자신에게 명백하다고 해서 다른 사람에게도 명백한 것은 아니다.
  - 다른 개발자는 무의식중에 여러분의 코드를 망가뜨릴 수 있다.
  - 시간이 지남에 따라 자신의 코드를 기억하지 못한다. 🥲

### 3.1.1 자신에게 분명하다고 해서 다른 사람에게도 분명한 것은 아니다.

- 다른 개발자가 여러분의 코드를 변경하거나, 여러분의 코드가 의존하고 있는 코드를 변경해야 할 수도 있다는 것을 기억해야 한다.그들은 그 문제를 이해하고 어떻게 해결할지에 대해 생각할 수 있는 시간을 아직 충분히 갖지 못한 상태다. 여러분이 코드를 작성할 당시에 너무도 분명해 보였을 것들이 그들에게는 분명하지 않을 것이다.
- 이것을 항상 고려하고 코드가 어떻게 사용되어야 하는지, 무엇을 하는지, 그리고 왜 그 일을 하고 있는지 설명하는 것이 유용하다.
- 코드를 이해하기 쉽고 코드 자체로 설명이 되게 하는 것이 좋은 방법이다.

### 3.1.2 다른 개발자는 무의식중에 여러분의 코드를 망가뜨릴 수 있다.

- 다른 개발자의 코드 변경으로 인해 자신의 코드가 작동하지 않거나 오용하는 결과를 가져올 수 있다. 이를 위한 방법으로는 무언가 문제가 있을 때 코드 컴파일이 중지되거나 테스트가 실패하도록 만드는 것이다.

### 3.1.3 시간이 지나면 자신의 코드를 기억하지 못한다.

- 1~2년 전에 작성한 코드를 다시 들여다보는 일은 다른 사람이 작성한 코드를 보는 것과 크게 다르지 않다. 그러므로 배경지식이 거의 없거나 전혀 없는 사람에게도 자신의 코드가 이해하기 쉬어야 하고, 잘 작동하던 코드에 버그가 발생하는 것이 어려워야 한다. 

## 3.2 여러분이 작성한 코드의 사용법을 다른 사람들은 어떻게 아는가?

코드를 파악하기 위해 이해해야 하는 것들 

- 여러 가지 상황에서 어떤 함수를 호출해야 하는지
- 클래스가 무엇을 나타내는지 그리고 언제 사용되어야 하는지
- 어떤 값을 인수를 사용해야 하는지
- 코드가 수행하는 동작이 무엇인지
- 어떤 값을 반환하는지

코드 이해를 위해 다른 개발자가 할 수 있는 일

- 함수, 클래스, 열거형 등의 이름을 살펴본다.
- 함수와 생성자의 매개변수 유형 또는 반환값의 유형 같은 데이터 유형을 살펴본다.
- 함수/클래스 수준의 문서나 주석문을 읽어본다.
- 직접 와서 묻거나 채팅/이메일을 통해 문의한다. 😎
- 여러분이 작성한 함수와 클래스의 자세한 구현 코드를 읽는다. 

### 3.2.1 이름 확인

- 자신의 코드를 다른 개발자가 어떻게 사용해야 하는지에 대해 가장 잘 전달할 수 있는 방법 중 하나는 이름을 잘 짓는 것이다. 

### 3.2.2. 데이터 유형 확인

- 유형 시스템을 사용하는 언어로 코드를 작성하는 것은 다른 개발자가 코드를 오용하거나 오작동 할 수 없도록 하기 위한 좋은 방법 중 하나이다.

### 3.2.3 문서 읽기

- 코드를 사용하는 방법에 관한 문서 
  - 함수 및 클래스 수준의 비공식적인 주석문
  - 자바독과 같은 좀 더 공식적인 코드 내 문서
  - 외부문서
- 하지만
  - 다른 개발자가 이 문서들을 읽을 것이라는 보장이 없고,
  - 잘못 해석할 수 있고,
  - 문서의 업데이트가 제대로 안될 수 있다.

### 3.2.4 직접 물어보기

- 코드를 작성한지 얼마되지 않았다면 이 접근법이 상당히 효과적일 수 있지만, 아래의 이유로 신뢰하기 어렵다.
  - 코드를 많이 작성할수록 질문에 답하는 데 많은 시간을 써야하고
  - 코드 작성자의 부재시에는 코드에 대해 물어볼 사람이 없고
  - 자신의 코드를 기억하지 못할 수 있다.

### 3.2.5 코드를 살펴보는 것

- 코드를 사용하는 방법을 알기 위해 개발자가 구현 세부 사항을 읽어야 한다면 이는 분명히 추상화 계층의 많은 이점을 부정하는 것이 된다. 

## 3.3 코드 계약

- 계약에 의한 프로그래밍(Programming by contact)
- 계약에 의한 디자인 (Design by contract)
- 다른 사람들이 어떻게 코드를 사용할지, 그리고 코드가 무엇을 할 것으로 기대할 수 있는지에 대한 것
- 서로 다른 코드간의 상호작용을 마치 계약처럼 생각한다. 

코드 계약에 대한 용어를 나누는 범주 

- 선결 조건(precondition) : 코드를 호출하기 전에 사실이어야 하는 것
- 사후 조건(postcondition) : 코드가 호출된 후에 사실이어야 하는 것
- 불변 사항(invariant) : 코드가 호출되기 전과 후에 시스템 상태를 비교해서 변경되지 않아야 하는 사항

입력 매개변수가 있는 함수를 작성하거나, 값을 반환하거나, 어떤 상태를 수정하면 이것은 계약을 생성한 것이 되는데, 그 이유는 코드를 호출하는 사람에게 무언가를 설정하거나 입력(선결 조건)을 제공해야할 요건을 부여하고, 호출 결과가 일어날 일 혹은 반환될 값(사후 조건)에 대한 기대를 갖게 하기 때문이다. 

### 3.3.1 계약의 세부 조항

- 스쿠터 계약 예시
- 계약의 명확한 부분
  - 함수와 클래스 이름: 호출하는 쪽에서 이것을 모르면 코드를 사용할 수 없다. 
  - 인자 유형 : 호출하는 쪽에서 인자의 유형을 잘못 사용하면 코드는 컴파일조차 되지 않는다.
  - 반환 유형 : 호출하는 쪽에서 함수의 반환 유형을 알아야 한다.
  - 검사 예외 : 호출하는 코드가 이것을 처리하지 않으면 코드는 컴파일되지 않는다.
- 세부조항
  - 주석문과 문서
  - 비검사 예외
- 코드 계약에서 조건을 명백하게 하는 것이 세부조항을 사용하는 것보다 훨씬 낫다. 

### 3.3.2 세부 조항에 너무 의존하지 말라 

- 세부 조항에 너무 많이 의존하면 오용하기 쉬운 취약한 코드가 될 가능성이 크고, 예상과 다르게 동작하기 쉽다. 이 두가지는 모두 고품질 코드의 적이다. 
- 명확하지 않을수도 있는 사항들을 문서화하는 것은 일반적으로 좋은 생각이지만, 너무 많이 의존하지 않는 것이 최선의 방법이다.
- 다른 개발자가 코드를 올바르게 사용하기 위해 세부 조항에 의존하기보다 잘못된 일을 하는 것을 처음부터 불가능하게 만드는 것이 좋다. 코드 계약의 세부 조항에 있는 어떤 항목에 대해 발생 자체가 불가능하도록 명백한 항목으로 바꾸는 것이다.
  - 상태나 가변성이 클래스 외부로 노출되는 것을 없앤다. 
    - 가변적: 객체를 생성 후 객체의 상태를 수정할 수 있는 경우
    - 불변적: 객체를 생성 후 상태를 변경할 수 없는 경우  

## 3.4 체크 및 어서션

### 3.4.1 체크

- 체크를 사용할 때 기대하는 것은 코드가 오용되면 고객에게 배포되거나 실제 프로덕션에서 서비스되기 전에 개발 단계나 테스트 단계에서 발견되고 수정되는 것이다. 

- 코드에 체그가 많이 있다면 세부 조항을 없애는 것에 대해 고려해봐야 한다는 신호일지 모른다. 

### 3.4.2 어셔션

- 코드 계약을 준수하도록 강제하기 위한 방법이라는 점에서 체크와 매우 유사하다.
- 어서션과 체크 사이의 주요 차이점은 배포를 위해 빌드할 때 어서션은 보통 컴파일에서 제외되며, 이는 코드가 실제 서비스 환경에서 사용될 때 실패를 명백하게 보여주지 않는다는 것을 의미한다. 
