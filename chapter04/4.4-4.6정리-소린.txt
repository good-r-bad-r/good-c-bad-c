## 4.4 복구할 수 없는 오류의 전달

복구할 가능성이 없는 오류가 발생하면 신속하게 실패하고, 요란하게 실패하는 것이 최상의 방법

- 비검사 예외를 발생
- 프로그램이 패닉되도록
  - Panic : 예상치 못한 문제가(unexpected errors) 발생 했음을 알려주기 위해서 사용한다. 보통 우아하게(gracefully)하게 처리할 수 없는 치명적인 에러에 대해서 즉시 처리 하기 위해서 사용 (ex. GO)
    - 오류: 프로그램상 허용하지 않는 문법과 같은 비정상적인 상황에서 발생
    - 예외: 프로그램이 실행되면서 논리상으로 부적합한 상황이 발생하는 것
- 체크나 어서션의 사용

자신을 호출한 쪽에 오류를 전달하는 것 외에는 할 수 있는 방법이 없음

## 4.5 호출하는 쪽에서 복구하기를 원할 수도 있는 오류의 전달

먼저 기억해야할 점은 여러분과 여러분의 팀이 동의한 철학이 다른 어떤 주장보다도 중요하다는 점

### 4.5.1 비검사 예외를 사용해야 한다는 주장

#### 코드 구조 개선

비검사 예외를 발생시키면 코드 구조를 개선할 수 있다고 주장하는 개발자들이 있다. 오류가 높은 계층까지 거슬러 올라오면서 전달되고, 그 사이에 있는 코드는 오류 처리를 할 필요가 없다.

이 접근법의 핵심 장점은 오류를 처리하는 로직이 코드 전체에 퍼지지 않고 별도로 몇 개의 계층에만 있다는 점이다.

#### 개발자들이 무엇을 할 것인지에 대해서 실용적이어야 함

검사 예외 발생 시 해당 함수를 호출하는 곳에 대해 모든 코드를 수정해야하기때문에 작업의 양이 많다. 개발자는 오류를 숨길지도 모른다. 그렇게 되면 이 함수를 호출할 때 데이터가 저장되지 않을 수도 있지만, 호출하는 쪽에서는 이 사실을 알지 못한다. 비검사 예외의 사용에 찬성하기 위해 자주 표현되는 주장 중 하나가 이 문제에 대해 실용적으로 접근해야 한다는 주장이다.

### 4.5.2 명시적 기법을 사용해야 한다는 주장

#### 매끄러운 오류 처리

입력을 처리하는 코드를 작성하는 엔지니어가 오류 시나리오를 알지 못하고 더 높은 수준으로 전달되도록 내버려 둔다면, 이는 사용자 친화적이지 않은 오류 메세지를 UI에 표시할 수 있따.

#### 실수로 오류를 무시할 수 없다.

비검사 예외가 사용되면 적극적인 의사 결정이 들어갈 여지는 줄어들고 대신 기본적으로 잘못된 일(오류를 처리하지 않는 일)이 일어나기 쉽다.

검사예외는 코드 검수 시 명확하게 드러나게 되고, 이런 잘못된 코드를 차단할 가능성이 커진다. 좀 더 명확한 오류 전달 방식을 사용하면 잘못된 일이 기본적으로 혹은 실수로 인해 일어나지 않는다.

명시적 오류 전달 기법을 사용할 때 오류를 적절히 처리하지 않으면 종종 고의적이고 노골적인 위반이 발생할 수 있다. 반대로 비검사 예외를 사용하면 오류가 제대로 처리되지 않았다는 사실을 코드에서 알 수 없다.

#### 개발자들이 무엇을 할 것인지에 대해서 실용적이어야 함

비검사 예외가 코드베이스 전반에 걸쳐 제대로 문서화된다는 보장이 없고, 개인적인 경험에 비추어 보면 문서화 되지 않는 경우가 많다. 이는 종종 어떤 코드가 어떤 예외를 발생시킬 것인지 확실하게 알지 못한다는 것을 의미하고, 이로 인해 예외를 처리하는 것이 당황스러운 두더지 잡기 게임이 될 수 있다.

### 4.5.3 필자의 의견: 명시적 방식을 사용하라

호출하는 쪽에서 복구하기를 원할 수도 있는 오류에 대해 비검사 예외를 사용하지 않는 것이 최상이라는 것이 필자의 의견이다.

필자의 경험상 비검사 예외의 사용은 코드베이스 전반에 걸쳐 완전히 문서화 되는 경우가 드물며, 이것이 의미하는 바는 해당 함수에 대해 발생 가능한 오류와 이에 대한 처리를 어떻게 해야하는지 개발자가 확실하게 알기란 거의 불가능하다는 것이다.

팀원들이 오류 전달에 대한 철학에 동의하고 그것을 따르는 것이 가장 바람직하다.

## 4.6 컴파일러 경고를 무시하지 말라

대부분의 컴파일러는 경고를 오류로 여기고 코드가 컴파일되지 않도록 설정할 수 있다. 이렇게 하는 것이 다소 과장되고 엄격해 보일 수 있지만, 개발자들이 경고를 알아차리고 그에 따라 행동하도록 강제하기 때문에 실제로는 매우 유용하다.

모든 이슈는 수정되었거나 정당한 이유가 있는 경우 유효한 설명과 함께 명시적으로 억제하기 때문에 코드를 컴파일할때 경고가 없는 것이 이상적이다.

## 요약

- 오류에는 크게 두 가지 종류가 있다.
  - 시스템이 복구할 수 있는 오류
  - 시스템이 복구할 수 없는 오류
- 해당 코드에 의해 생성된 오류로부터 복구할 수 있는지 여부를 해당 코드를 호출하는 쪽에서만 알 수 있는 경우가 많다.
- 에러가 발생하면 신속하게 실패하는 것이 좋고, 에러를 복구할 수 없는 경우에는 요란하게 실패하는 것이 바람직하다.
- 오류를 숨기는 거은 바람직하지 않으며, 오류가 발생했다는 신호를 보내는 것이 바람직하다.
- 오류 전달 기법은 두 가지 범주로 나눌 수 있다.
  - 명시적 방법: 코드 계약의 명확한 부분. 호출하는 쪽에서는 오류가 발생할 수 있음을 인지한다.
  - 암시적 방법: 코드 계약의 세부 조항을 통해 오류에 대한 설명이 제공되거나 전혀 설명이 없을 수도 있다. 오류가 발생할 수 있다는 것을 호출하는 쪽에서 반드시 인지하는 것은 아니다.
- 복구할 수 없는 오류에 대해서는 암시적 전달 기법을 사용해야 한다.
- 잠재적으로 복구할 수 있는 오류에 대해서는
  - 명시적 혹은 암시적 기법 중 어느것을 사용할지에 대해서는 개발자 사이에서도 일치되는 의견이 없다.
  - 필자의 의견으로는 명시적인 기법이 사용되어야 한다.
